// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: chess.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MoveType int32

const (
	MoveType_MOVE_TYPE_NORMAL    MoveType = 0
	MoveType_MOVE_TYPE_CASTLE    MoveType = 1
	MoveType_MOVE_TYPE_ENPASSANT MoveType = 2
)

// Enum value maps for MoveType.
var (
	MoveType_name = map[int32]string{
		0: "MOVE_TYPE_NORMAL",
		1: "MOVE_TYPE_CASTLE",
		2: "MOVE_TYPE_ENPASSANT",
	}
	MoveType_value = map[string]int32{
		"MOVE_TYPE_NORMAL":    0,
		"MOVE_TYPE_CASTLE":    1,
		"MOVE_TYPE_ENPASSANT": 2,
	}
)

func (x MoveType) Enum() *MoveType {
	p := new(MoveType)
	*p = x
	return p
}

func (x MoveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoveType) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_proto_enumTypes[0].Descriptor()
}

func (MoveType) Type() protoreflect.EnumType {
	return &file_chess_proto_enumTypes[0]
}

func (x MoveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoveType.Descriptor instead.
func (MoveType) EnumDescriptor() ([]byte, []int) {
	return file_chess_proto_rawDescGZIP(), []int{0}
}

type ClientPing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientPing) Reset() {
	*x = ClientPing{}
	mi := &file_chess_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPing) ProtoMessage() {}

func (x *ClientPing) ProtoReflect() protoreflect.Message {
	mi := &file_chess_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPing.ProtoReflect.Descriptor instead.
func (*ClientPing) Descriptor() ([]byte, []int) {
	return file_chess_proto_rawDescGZIP(), []int{0}
}

type ClientSubscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CenterX       uint32                 `protobuf:"varint,1,opt,name=centerX,proto3" json:"centerX,omitempty"`
	CenterY       uint32                 `protobuf:"varint,2,opt,name=centerY,proto3" json:"centerY,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientSubscribe) Reset() {
	*x = ClientSubscribe{}
	mi := &file_chess_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSubscribe) ProtoMessage() {}

func (x *ClientSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_chess_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSubscribe.ProtoReflect.Descriptor instead.
func (*ClientSubscribe) Descriptor() ([]byte, []int) {
	return file_chess_proto_rawDescGZIP(), []int{1}
}

func (x *ClientSubscribe) GetCenterX() uint32 {
	if x != nil {
		return x.CenterX
	}
	return 0
}

func (x *ClientSubscribe) GetCenterY() uint32 {
	if x != nil {
		return x.CenterY
	}
	return 0
}

type ClientMove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PieceId       uint32                 `protobuf:"varint,1,opt,name=pieceId,proto3" json:"pieceId,omitempty"`
	FromX         uint32                 `protobuf:"varint,2,opt,name=fromX,proto3" json:"fromX,omitempty"`
	FromY         uint32                 `protobuf:"varint,3,opt,name=fromY,proto3" json:"fromY,omitempty"`
	ToX           uint32                 `protobuf:"varint,4,opt,name=toX,proto3" json:"toX,omitempty"`
	ToY           uint32                 `protobuf:"varint,5,opt,name=toY,proto3" json:"toY,omitempty"`
	MoveType      MoveType               `protobuf:"varint,6,opt,name=moveType,proto3,enum=chess.MoveType" json:"moveType,omitempty"`
	MoveToken     uint32                 `protobuf:"varint,7,opt,name=moveToken,proto3" json:"moveToken,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientMove) Reset() {
	*x = ClientMove{}
	mi := &file_chess_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMove) ProtoMessage() {}

func (x *ClientMove) ProtoReflect() protoreflect.Message {
	mi := &file_chess_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMove.ProtoReflect.Descriptor instead.
func (*ClientMove) Descriptor() ([]byte, []int) {
	return file_chess_proto_rawDescGZIP(), []int{2}
}

func (x *ClientMove) GetPieceId() uint32 {
	if x != nil {
		return x.PieceId
	}
	return 0
}

func (x *ClientMove) GetFromX() uint32 {
	if x != nil {
		return x.FromX
	}
	return 0
}

func (x *ClientMove) GetFromY() uint32 {
	if x != nil {
		return x.FromY
	}
	return 0
}

func (x *ClientMove) GetToX() uint32 {
	if x != nil {
		return x.ToX
	}
	return 0
}

func (x *ClientMove) GetToY() uint32 {
	if x != nil {
		return x.ToY
	}
	return 0
}

func (x *ClientMove) GetMoveType() MoveType {
	if x != nil {
		return x.MoveType
	}
	return MoveType_MOVE_TYPE_NORMAL
}

func (x *ClientMove) GetMoveToken() uint32 {
	if x != nil {
		return x.MoveToken
	}
	return 0
}

type ClientMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ClientMessage_Ping
	//	*ClientMessage_Subscribe
	//	*ClientMessage_Move
	Payload       isClientMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	mi := &file_chess_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chess_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_chess_proto_rawDescGZIP(), []int{3}
}

func (x *ClientMessage) GetPayload() isClientMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ClientMessage) GetPing() *ClientPing {
	if x != nil {
		if x, ok := x.Payload.(*ClientMessage_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *ClientMessage) GetSubscribe() *ClientSubscribe {
	if x != nil {
		if x, ok := x.Payload.(*ClientMessage_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *ClientMessage) GetMove() *ClientMove {
	if x != nil {
		if x, ok := x.Payload.(*ClientMessage_Move); ok {
			return x.Move
		}
	}
	return nil
}

type isClientMessage_Payload interface {
	isClientMessage_Payload()
}

type ClientMessage_Ping struct {
	Ping *ClientPing `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type ClientMessage_Subscribe struct {
	Subscribe *ClientSubscribe `protobuf:"bytes,2,opt,name=subscribe,proto3,oneof"`
}

type ClientMessage_Move struct {
	Move *ClientMove `protobuf:"bytes,3,opt,name=move,proto3,oneof"`
}

func (*ClientMessage_Ping) isClientMessage_Payload() {}

func (*ClientMessage_Subscribe) isClientMessage_Payload() {}

func (*ClientMessage_Move) isClientMessage_Payload() {}

var File_chess_proto protoreflect.FileDescriptor

const file_chess_proto_rawDesc = "" +
	"\n" +
	"\vchess.proto\x12\x05chess\"\f\n" +
	"\n" +
	"ClientPing\"E\n" +
	"\x0fClientSubscribe\x12\x18\n" +
	"\acenterX\x18\x01 \x01(\rR\acenterX\x12\x18\n" +
	"\acenterY\x18\x02 \x01(\rR\acenterY\"\xc1\x01\n" +
	"\n" +
	"ClientMove\x12\x18\n" +
	"\apieceId\x18\x01 \x01(\rR\apieceId\x12\x14\n" +
	"\x05fromX\x18\x02 \x01(\rR\x05fromX\x12\x14\n" +
	"\x05fromY\x18\x03 \x01(\rR\x05fromY\x12\x10\n" +
	"\x03toX\x18\x04 \x01(\rR\x03toX\x12\x10\n" +
	"\x03toY\x18\x05 \x01(\rR\x03toY\x12+\n" +
	"\bmoveType\x18\x06 \x01(\x0e2\x0f.chess.MoveTypeR\bmoveType\x12\x1c\n" +
	"\tmoveToken\x18\a \x01(\rR\tmoveToken\"\xa4\x01\n" +
	"\rClientMessage\x12'\n" +
	"\x04ping\x18\x01 \x01(\v2\x11.chess.ClientPingH\x00R\x04ping\x126\n" +
	"\tsubscribe\x18\x02 \x01(\v2\x16.chess.ClientSubscribeH\x00R\tsubscribe\x12'\n" +
	"\x04move\x18\x03 \x01(\v2\x11.chess.ClientMoveH\x00R\x04moveB\t\n" +
	"\apayload*O\n" +
	"\bMoveType\x12\x14\n" +
	"\x10MOVE_TYPE_NORMAL\x10\x00\x12\x14\n" +
	"\x10MOVE_TYPE_CASTLE\x10\x01\x12\x17\n" +
	"\x13MOVE_TYPE_ENPASSANT\x10\x02B2Z0one-million-chessboards/server/protocol;protocolb\x06proto3"

var (
	file_chess_proto_rawDescOnce sync.Once
	file_chess_proto_rawDescData []byte
)

func file_chess_proto_rawDescGZIP() []byte {
	file_chess_proto_rawDescOnce.Do(func() {
		file_chess_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chess_proto_rawDesc), len(file_chess_proto_rawDesc)))
	})
	return file_chess_proto_rawDescData
}

var file_chess_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chess_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chess_proto_goTypes = []any{
	(MoveType)(0),           // 0: chess.MoveType
	(*ClientPing)(nil),      // 1: chess.ClientPing
	(*ClientSubscribe)(nil), // 2: chess.ClientSubscribe
	(*ClientMove)(nil),      // 3: chess.ClientMove
	(*ClientMessage)(nil),   // 4: chess.ClientMessage
}
var file_chess_proto_depIdxs = []int32{
	0, // 0: chess.ClientMove.moveType:type_name -> chess.MoveType
	1, // 1: chess.ClientMessage.ping:type_name -> chess.ClientPing
	2, // 2: chess.ClientMessage.subscribe:type_name -> chess.ClientSubscribe
	3, // 3: chess.ClientMessage.move:type_name -> chess.ClientMove
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_chess_proto_init() }
func file_chess_proto_init() {
	if File_chess_proto != nil {
		return
	}
	file_chess_proto_msgTypes[3].OneofWrappers = []any{
		(*ClientMessage_Ping)(nil),
		(*ClientMessage_Subscribe)(nil),
		(*ClientMessage_Move)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chess_proto_rawDesc), len(file_chess_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chess_proto_goTypes,
		DependencyIndexes: file_chess_proto_depIdxs,
		EnumInfos:         file_chess_proto_enumTypes,
		MessageInfos:      file_chess_proto_msgTypes,
	}.Build()
	File_chess_proto = out.File
	file_chess_proto_goTypes = nil
	file_chess_proto_depIdxs = nil
}
